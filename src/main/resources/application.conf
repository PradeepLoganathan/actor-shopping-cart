akka {
  loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  
  # Log the complete configuration at INFO level when the actor system is started.
  log-config-on-start = on
  
  actor {
    debug {
      receive = on
      autoreceive = off
      lifecycle = off
      event-stream = off
      unhandled = on
    }
    
    # Serialization settings for Akka Persistence
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      java = "akka.serialization.JavaSerializer"
    }
    
    serialization-bindings {
      "com.example.shoppingcart.model.ShoppingCartEvent" = jackson-json
      "com.example.shoppingcart.model.PersistentCartState" = jackson-json
    }
    
    # Enable Cluster
    provider = "cluster"
    
    # Enable Cluster Sharding
    cluster.sharding {
      number-of-shards = 10
    }
  }
  
  # Cluster configuration
  cluster {
    # Enable metrics extension in akka-cluster-metrics.
    metrics.enabled = on
    
    # Enable split brain resolver
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    
    # When node cannot be reached within 10 seconds, it is marked as unreachable
    failure-detector.acceptable-heartbeat-pause = 10s
  }
  
  # Persistence configuration
  persistence {
    journal {
      plugin = "akka.persistence.journal.inmem"
      
      inmem {
        class = "akka.persistence.journal.inmem.InmemJournal"
        event-adapters {
          jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        }
        event-adapter-bindings = {
          "com.example.shoppingcart.model.ShoppingCartEvent" = jackson-json
        }
      }
    }
    
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      
      local {
        class = "akka.persistence.snapshot.local.LocalSnapshotStore"
        dir = "target/snapshots"
      }
    }
  }
  
  # Enable Cluster Sharding
  cluster.sharding {
    # Number of shards used when no specific number is given
    number-of-shards = 1000
    
    # When this is set to 'on' the active entity actors will automatically be restarted 
    # upon Shard restart. i.e. if the Shard is started on a different ShardRegion 
    # due to rebalance or crash.
    remember-entities = on
    
    # The shard rebalancing algorithm will start rebalancing when the nodes in the 
    # cluster that hosts a shard for the entity type is different from the optimal 
    # set of nodes.
    rebalance-threshold = 1
  }
  
  # JVM shutdown, System.exit(-1), in case of a fatal error
  jvm-exit-on-fatal-error = on
}
